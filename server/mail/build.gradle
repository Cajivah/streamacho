buildscript {
    ext {
        gradleDockerPluginVersion = '3.2.5'
        springBootVersion = '2.0.0.RELEASE'
        junitPlatformPluginVersion = '1.1.0'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("com.bmuschko:gradle-docker-plugin:${gradleDockerPluginVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitPlatformPluginVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.junit.platform.gradle.plugin'

group = 'com.streamacho.mail'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 9

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/libs-milestone" }
    }

    compileJava {
        options.compilerArgs = [
                '-Amapstruct.suppressGeneratorTimestamp=true',
                '-Amapstruct.suppressGeneratorVersionInfoComment=true',
                '-Amapstruct.defaultComponentModel=spring',
                '-Amapstruct.unmappedTargetPolicy=ERROR'
        ]
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/libs-milestone" }
}

ext {
    gradleAptPluginVersion = '0.15'
    junitJupiterVersion = '5.1.0'
    javaxActivationVersion = '1.1.1'
    jaxbApiVersion = '2.3.0'
    jaxbVersion = '2.3.0'
    junitPlatformVersion = '1.1.0'
    junit4Version = '4.12'
    junitVintageVersion = '5.1.0'
    lombokVersion = '1.16.20'
    mapstructVersion = '1.2.0.Final'
    mockitoCoreVersion = '2.15.0'
    springVersion = '5.0.4.RELEASE'
    vavrVersion = '0.9.2'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("io.vavr:vavr:${vavrVersion}")
    compile("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
    // Transition to Java9 dependencies
    compile("javax.xml.bind:jaxb-api:${jaxbVersion}")
    compile("com.sun.xml.bind:jaxb-impl:${jaxbVersion}")
    compile("org.glassfish.jaxb:jaxb-runtime:${jaxbVersion}")
    compile("javax.activation:activation:${javaxActivationVersion}")

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}")

    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}")
    testCompile("org.mockito:mockito-core:${mockitoCoreVersion}")

    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testRuntime("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
}
